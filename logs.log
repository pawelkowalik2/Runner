2025-08-13 13:44:15,390:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-13 13:44:15,390:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-13 13:44:15,390:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-13 13:44:15,390:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-13 13:55:04,126:INFO:Initializing predict_model()
2025-08-13 13:55:04,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659B1510>, estimator=239, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C453A0>)
2025-08-13 13:55:04,126:INFO:Checking exceptions
2025-08-13 13:55:49,587:INFO:Initializing predict_model()
2025-08-13 13:55:49,587:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC6598AD10>, estimator=239, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C37BEC0>)
2025-08-13 13:55:49,587:INFO:Checking exceptions
2025-08-13 13:56:00,956:INFO:Initializing predict_model()
2025-08-13 13:56:00,956:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC5C36FC90>, estimator=323, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C47560>)
2025-08-13 13:56:00,956:INFO:Checking exceptions
2025-08-13 14:10:24,825:INFO:Initializing predict_model()
2025-08-13 14:10:24,826:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659A1150>, estimator=  P³eæ  Rocznik  5 km Tempo
0    M     1994       240.0, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C45080>)
2025-08-13 14:10:24,826:INFO:Checking exceptions
2025-08-13 14:10:39,455:INFO:Initializing predict_model()
2025-08-13 14:10:39,455:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659ADF10>, estimator=  P³eæ  Rocznik  5 km Tempo
0    M     1994       240.0, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C47380>)
2025-08-13 14:10:39,455:INFO:Checking exceptions
2025-08-13 14:11:27,281:INFO:Initializing predict_model()
2025-08-13 14:11:27,281:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC5C36FFD0>, estimator=  P³eæ  Rocznik  5 km Tempo
0    M     1994         4.0, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC59C39080>)
2025-08-13 14:11:27,281:INFO:Checking exceptions
2025-08-13 14:12:02,467:INFO:Initializing predict_model()
2025-08-13 14:12:02,468:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659B7590>, estimator=  P³eæ  Rocznik  5 km Tempo
0    M     1994         4.0, probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65D69080>)
2025-08-13 14:12:02,468:INFO:Checking exceptions
2025-08-13 14:12:55,591:INFO:Initializing load_model()
2025-08-13 14:12:55,591:INFO:load_model(model_name=best_halfmarathon_model.pkl, platform=None, authentication=None, verbose=True)
2025-08-13 14:13:43,573:INFO:Initializing load_model()
2025-08-13 14:13:43,573:INFO:load_model(model_name=best_halfmarathon_model.pkl, platform=None, authentication=None, verbose=True)
2025-08-13 14:14:13,037:INFO:Initializing load_model()
2025-08-13 14:14:13,037:INFO:load_model(model_name=best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-13 14:14:21,409:INFO:Initializing load_model()
2025-08-13 14:14:21,409:INFO:load_model(model_name=best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-13 14:16:18,962:INFO:Initializing load_model()
2025-08-13 14:16:18,963:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-13 14:16:19,062:INFO:Initializing predict_model()
2025-08-13 14:16:19,062:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65CA4290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F26DE0>)
2025-08-13 14:16:19,062:INFO:Checking exceptions
2025-08-13 14:16:19,062:INFO:Preloading libraries
2025-08-13 14:16:19,062:INFO:Set up data.
2025-08-13 14:16:19,064:INFO:Set up index.
2025-08-13 14:17:32,062:INFO:Initializing predict_model()
2025-08-13 14:17:32,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65E8F290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3FBA0>)
2025-08-13 14:17:32,063:INFO:Checking exceptions
2025-08-13 14:17:32,063:INFO:Preloading libraries
2025-08-13 14:17:32,063:INFO:Set up data.
2025-08-13 14:17:32,065:INFO:Set up index.
2025-08-13 14:17:49,130:INFO:Initializing predict_model()
2025-08-13 14:17:49,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65EED850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3FCE0>)
2025-08-13 14:17:49,130:INFO:Checking exceptions
2025-08-13 14:17:49,131:INFO:Preloading libraries
2025-08-13 14:17:49,131:INFO:Set up data.
2025-08-13 14:17:49,132:INFO:Set up index.
2025-08-13 14:21:31,556:INFO:Initializing predict_model()
2025-08-13 14:21:31,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65963E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C45080>)
2025-08-13 14:21:31,556:INFO:Checking exceptions
2025-08-13 14:21:31,556:INFO:Preloading libraries
2025-08-13 14:21:31,556:INFO:Set up data.
2025-08-13 14:21:31,558:INFO:Set up index.
2025-08-13 14:23:25,694:INFO:Initializing predict_model()
2025-08-13 14:23:25,695:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC5ABE7750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C3CBBA0>)
2025-08-13 14:23:25,695:INFO:Checking exceptions
2025-08-13 14:23:25,695:INFO:Preloading libraries
2025-08-13 14:23:25,695:INFO:Set up data.
2025-08-13 14:23:25,697:INFO:Set up index.
2025-08-13 14:23:33,589:INFO:Initializing predict_model()
2025-08-13 14:23:33,589:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659C3DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C45120>)
2025-08-13 14:23:33,589:INFO:Checking exceptions
2025-08-13 14:23:33,590:INFO:Preloading libraries
2025-08-13 14:23:33,590:INFO:Set up data.
2025-08-13 14:23:33,591:INFO:Set up index.
2025-08-13 14:24:03,939:INFO:Initializing predict_model()
2025-08-13 14:24:03,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659B78D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C60CD60>)
2025-08-13 14:24:03,940:INFO:Checking exceptions
2025-08-13 14:24:03,940:INFO:Preloading libraries
2025-08-13 14:24:03,940:INFO:Set up data.
2025-08-13 14:24:03,941:INFO:Set up index.
2025-08-13 14:25:58,269:INFO:Initializing predict_model()
2025-08-13 14:25:58,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65E80E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C398540>)
2025-08-13 14:25:58,269:INFO:Checking exceptions
2025-08-13 14:25:58,269:INFO:Preloading libraries
2025-08-13 14:25:58,269:INFO:Set up data.
2025-08-13 14:25:58,271:INFO:Set up index.
2025-08-13 14:29:01,730:INFO:Initializing predict_model()
2025-08-13 14:29:01,731:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC5C393310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3E840>)
2025-08-13 14:29:01,731:INFO:Checking exceptions
2025-08-13 14:29:01,731:INFO:Preloading libraries
2025-08-13 14:29:01,731:INFO:Set up data.
2025-08-13 14:29:01,732:INFO:Set up index.
2025-08-13 14:48:48,201:INFO:Initializing predict_model()
2025-08-13 14:48:48,202:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65D0A9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65C44E00>)
2025-08-13 14:48:48,202:INFO:Checking exceptions
2025-08-13 14:48:48,202:INFO:Preloading libraries
2025-08-13 14:48:48,202:INFO:Set up data.
2025-08-13 14:48:48,203:INFO:Set up index.
2025-08-13 14:53:29,366:INFO:Initializing predict_model()
2025-08-13 14:53:29,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC6252C590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3EC00>)
2025-08-13 14:53:29,366:INFO:Checking exceptions
2025-08-13 14:53:29,366:INFO:Preloading libraries
2025-08-13 14:53:29,366:INFO:Set up data.
2025-08-13 14:53:29,368:INFO:Set up index.
2025-08-13 14:54:01,143:INFO:Initializing predict_model()
2025-08-13 14:54:01,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659BF950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C3980E0>)
2025-08-13 14:54:01,143:INFO:Checking exceptions
2025-08-13 14:54:01,144:INFO:Preloading libraries
2025-08-13 14:54:01,144:INFO:Set up data.
2025-08-13 14:54:01,146:INFO:Set up index.
2025-08-13 14:56:24,315:INFO:Initializing predict_model()
2025-08-13 14:56:24,316:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC5C386990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3FEC0>)
2025-08-13 14:56:24,316:INFO:Checking exceptions
2025-08-13 14:56:24,316:INFO:Preloading libraries
2025-08-13 14:56:24,316:INFO:Set up data.
2025-08-13 14:56:24,318:INFO:Set up index.
2025-08-13 14:57:16,042:INFO:Initializing predict_model()
2025-08-13 14:57:16,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65C77C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65D68900>)
2025-08-13 14:57:16,043:INFO:Checking exceptions
2025-08-13 14:57:16,043:INFO:Preloading libraries
2025-08-13 14:57:16,043:INFO:Set up data.
2025-08-13 14:57:16,044:INFO:Set up index.
2025-08-13 15:01:21,615:INFO:Initializing predict_model()
2025-08-13 15:01:21,615:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659AF190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65B07F60>)
2025-08-13 15:01:21,615:INFO:Checking exceptions
2025-08-13 15:01:21,615:INFO:Preloading libraries
2025-08-13 15:01:21,615:INFO:Set up data.
2025-08-13 15:01:21,617:INFO:Set up index.
2025-08-13 15:01:36,415:INFO:Initializing predict_model()
2025-08-13 15:01:36,415:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65D4D2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC5C3CBB00>)
2025-08-13 15:01:36,415:INFO:Checking exceptions
2025-08-13 15:01:36,415:INFO:Preloading libraries
2025-08-13 15:01:36,416:INFO:Set up data.
2025-08-13 15:01:36,417:INFO:Set up index.
2025-08-13 15:01:45,829:INFO:Initializing predict_model()
2025-08-13 15:01:45,829:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC659B2250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3F9C0>)
2025-08-13 15:01:45,829:INFO:Checking exceptions
2025-08-13 15:01:45,829:INFO:Preloading libraries
2025-08-13 15:01:45,829:INFO:Set up data.
2025-08-13 15:01:45,831:INFO:Set up index.
2025-08-13 15:02:34,984:INFO:Initializing predict_model()
2025-08-13 15:02:34,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FC65E73E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FC65F3F9C0>)
2025-08-13 15:02:34,985:INFO:Checking exceptions
2025-08-13 15:02:34,985:INFO:Preloading libraries
2025-08-13 15:02:34,985:INFO:Set up data.
2025-08-13 15:02:34,986:INFO:Set up index.
2025-08-14 09:20:55,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:20:55,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:20:55,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:20:55,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:40:05,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:40:05,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:40:05,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 09:40:05,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 10:58:29,094:INFO:Initializing load_model()
2025-08-14 10:58:29,094:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-14 10:58:29,210:INFO:Initializing predict_model()
2025-08-14 10:58:29,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A7C7FD1290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A7C81F3A60>)
2025-08-14 10:58:29,210:INFO:Checking exceptions
2025-08-14 10:58:29,210:INFO:Preloading libraries
2025-08-14 10:58:29,213:INFO:Set up data.
2025-08-14 10:58:29,217:INFO:Set up index.
2025-08-14 11:03:54,135:INFO:Initializing predict_model()
2025-08-14 11:03:54,135:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A7C81E7890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A7C7F96F20>)
2025-08-14 11:03:54,135:INFO:Checking exceptions
2025-08-14 11:03:54,135:INFO:Preloading libraries
2025-08-14 11:03:54,135:INFO:Set up data.
2025-08-14 11:03:54,138:INFO:Set up index.
2025-08-14 11:05:40,553:INFO:Initializing predict_model()
2025-08-14 11:05:40,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A7C7FB7510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A7C8009E40>)
2025-08-14 11:05:40,553:INFO:Checking exceptions
2025-08-14 11:05:40,553:INFO:Preloading libraries
2025-08-14 11:05:40,554:INFO:Set up data.
2025-08-14 11:05:40,555:INFO:Set up index.
2025-08-14 11:06:09,627:INFO:Initializing predict_model()
2025-08-14 11:06:09,628:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001A7BF3D4810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A7C8008A40>)
2025-08-14 11:06:09,628:INFO:Checking exceptions
2025-08-14 11:06:09,628:INFO:Preloading libraries
2025-08-14 11:06:09,628:INFO:Set up data.
2025-08-14 11:06:09,629:INFO:Set up index.
2025-08-14 16:42:04,545:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 16:42:04,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 16:42:04,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 16:42:04,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 16:56:02,204:INFO:Initializing load_model()
2025-08-14 16:56:02,204:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-14 16:56:02,299:INFO:Initializing predict_model()
2025-08-14 16:56:02,299:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BF5206EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001BF5229B9C0>)
2025-08-14 16:56:02,300:INFO:Checking exceptions
2025-08-14 16:56:02,300:INFO:Preloading libraries
2025-08-14 16:56:02,300:INFO:Set up data.
2025-08-14 16:56:02,302:INFO:Set up index.
2025-08-14 17:02:12,890:INFO:Initializing predict_model()
2025-08-14 17:02:12,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BF520A42D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001BF52305940>)
2025-08-14 17:02:12,890:INFO:Checking exceptions
2025-08-14 17:02:12,890:INFO:Preloading libraries
2025-08-14 17:02:12,890:INFO:Set up data.
2025-08-14 17:02:12,893:INFO:Set up index.
2025-08-14 17:03:25,363:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:03:25,363:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:03:25,363:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:03:25,363:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:04:44,455:INFO:Initializing load_model()
2025-08-14 17:04:44,455:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-14 17:04:44,536:INFO:Initializing predict_model()
2025-08-14 17:04:44,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021A5D687C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021A5DAF4E00>)
2025-08-14 17:04:44,536:INFO:Checking exceptions
2025-08-14 17:04:44,536:INFO:Preloading libraries
2025-08-14 17:04:44,537:INFO:Set up data.
2025-08-14 17:04:44,539:INFO:Set up index.
2025-08-14 17:10:10,225:INFO:Initializing predict_model()
2025-08-14 17:10:10,226:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021A5CD05250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021A5D658180>)
2025-08-14 17:10:10,226:INFO:Checking exceptions
2025-08-14 17:10:10,226:INFO:Preloading libraries
2025-08-14 17:10:10,226:INFO:Set up data.
2025-08-14 17:10:10,228:INFO:Set up index.
2025-08-14 17:10:58,342:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:10:58,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:10:58,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:10:58,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:11:04,414:INFO:Initializing load_model()
2025-08-14 17:11:04,414:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-14 17:11:04,494:INFO:Initializing predict_model()
2025-08-14 17:11:04,494:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000027A82701F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000027AF9A55800>)
2025-08-14 17:11:04,494:INFO:Checking exceptions
2025-08-14 17:11:04,494:INFO:Preloading libraries
2025-08-14 17:11:04,494:INFO:Set up data.
2025-08-14 17:11:04,496:INFO:Set up index.
2025-08-14 17:17:19,254:INFO:Initializing predict_model()
2025-08-14 17:17:19,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000027A82702C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000027A83E0E480>)
2025-08-14 17:17:19,254:INFO:Checking exceptions
2025-08-14 17:17:19,254:INFO:Preloading libraries
2025-08-14 17:17:19,254:INFO:Set up data.
2025-08-14 17:17:19,256:INFO:Set up index.
2025-08-14 17:17:41,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:17:41,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:17:41,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:17:41,968:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-14 17:18:08,518:INFO:Initializing load_model()
2025-08-14 17:18:08,518:INFO:load_model(model_name=model\best_halfmarathon_model, platform=None, authentication=None, verbose=True)
2025-08-14 17:18:08,599:INFO:Initializing predict_model()
2025-08-14 17:18:08,599:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019226528450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019227C49120>)
2025-08-14 17:18:08,599:INFO:Checking exceptions
2025-08-14 17:18:08,599:INFO:Preloading libraries
2025-08-14 17:18:08,600:INFO:Set up data.
2025-08-14 17:18:08,601:INFO:Set up index.
2025-08-14 17:28:57,647:INFO:Initializing predict_model()
2025-08-14 17:28:57,647:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019227C59AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Rocznik', '5 km Tempo'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['P³eæ'],
                                    transformer=OrdinalEncoder(cols=['P³eæ'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'P³eæ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': K      0
M      1
NaN   -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 GradientBoostingRegressor(random_state=7894))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019227DD3E20>)
2025-08-14 17:28:57,647:INFO:Checking exceptions
2025-08-14 17:28:57,647:INFO:Preloading libraries
2025-08-14 17:28:57,648:INFO:Set up data.
2025-08-14 17:28:57,649:INFO:Set up index.
